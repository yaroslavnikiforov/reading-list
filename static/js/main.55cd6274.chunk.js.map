{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext/index.js","components/Navbar/index.js","actions/bookActions.js","components/BookDetails/index.js","components/BookList/index.js","components/NewBookForm/index.js","serviceWorker.js","index.js","App.js"],"names":["bookReducer","state","action","type","types","ADD_BOOK","concat","Object","toConsumableArray","book","REMOVE_BOOK","filter","id","bookId","BookContext","createContext","BookContextProvider","props","_useReducer","useReducer","localData","localStorage","getItem","JSON","parse","_useReducer2","slicedToArray","books","dispatch","useEffect","setItem","stringify","react_default","a","createElement","Provider","value","children","Navbar","useContext","className","length","addBook","removeBook","BookDetails","_ref","onClick","title","author","BookList","map","key","NewBookForm","_useState","useState","_useState2","formState","setFormState","handleInputChange","event","target","name","objectSpread","defineProperty","onSubmit","preventDefault","newTitle","trim","newAuthor","uuid","onChange","placeholder","required","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55cd6274.chunk.js","sourcesContent":["import types from \"../actions/types\";\n\nexport default function(state, action) {\n  switch (action.type) {\n    case types.ADD_BOOK:\n      return [...state, action.book];\n\n    case types.REMOVE_BOOK:\n      return state.filter(book => book.id !== action.bookId);\n\n    default:\n      return state;\n  }\n}\n","import React, { createContext, useReducer, useEffect } from \"react\";\nimport bookReducer from \"../../reducers/bookReducer\";\n\nexport const BookContext = createContext();\n\nexport default function BookContextProvider(props) {\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\n    const localData = localStorage.getItem(\"books\");\n\n    return localData ? JSON.parse(localData) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"books\", JSON.stringify(books));\n  }, [books]);\n\n  return (\n    <BookContext.Provider value={{ books, dispatch }}>\n      {props.children}\n    </BookContext.Provider>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { BookContext } from \"../../contexts/BookContext\";\nimport \"./styles.scss\";\n\nexport default function Navbar() {\n  const { books } = useContext(BookContext);\n\n  return (\n    <div className=\"navbar\">\n      <h1>Reading List</h1>\n\n      <p>Currently you have {books.length} books to get through...</p>\n    </div>\n  );\n}\n","import types from \"./types.json\";\n\nexport const addBook = book => ({\n  type: types.ADD_BOOK,\n  book\n});\n\nexport const removeBook = bookId => ({\n  type: types.REMOVE_BOOK,\n  bookId\n});\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { BookContext } from \"../../contexts/BookContext\";\nimport { removeBook } from \"../../actions/bookActions\";\nimport \"./styles.scss\";\n\nexport default function BookDetails({ book }) {\n  const { dispatch } = useContext(BookContext);\n\n  const handleBookRemove = () => dispatch(removeBook(book.id));\n\n  return (\n    <li className=\"details\" onClick={handleBookRemove}>\n      <div className=\"details__title\">{book.title}</div>\n\n      <div className=\"details__author\">{book.author}</div>\n    </li>\n  );\n}\n\nBookDetails.propTypes = {\n  book: PropTypes.object.isRequired\n};\n","import React, { useContext } from \"react\";\nimport { BookContext } from \"../../contexts/BookContext\";\nimport BookDetails from \"../BookDetails\";\nimport \"./styles.scss\";\n\nexport default function BookList() {\n  const { books } = useContext(BookContext);\n\n  return books.length ? (\n    <div className=\"book-list\">\n      <ul>\n        {books.map(book => (\n          <BookDetails key={book.id} book={book}></BookDetails>\n        ))}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"book-list-empty\">No books to read</div>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport uuid from \"uuid/v4\";\nimport { BookContext } from \"../../contexts/BookContext\";\nimport { addBook } from \"../../actions/bookActions\";\nimport \"./styles.scss\";\n\nexport default function NewBookForm({ book }) {\n  const { dispatch } = useContext(BookContext);\n\n  const [formState, setFormState] = useState({ title: \"\", author: \"\" });\n  const { title, author } = formState;\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newTitle = title.trim();\n    const newAuthor = author.trim();\n\n    if (newTitle && newAuthor) {\n      dispatch(addBook({ id: uuid(), title: newTitle, author: newAuthor }));\n    }\n\n    setFormState({\n      title: \"\",\n      author: \"\"\n    });\n  };\n\n  const handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <form className=\"new-book-form\" onSubmit={handleSubmit}>\n      <input\n        name=\"title\"\n        type=\"text\"\n        value={formState.title}\n        onChange={handleInputChange}\n        placeholder=\"Book title\"\n        required\n      />\n\n      <input\n        name=\"author\"\n        type=\"text\"\n        value={formState.author}\n        onChange={handleInputChange}\n        placeholder=\"Author\"\n        required\n      />\n\n      <input type=\"submit\" />\n    </form>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport BookContextProvider from \"./contexts/BookContext\";\nimport Navbar from \"./components/Navbar\";\nimport BookList from \"./components/BookList\";\nimport NewBookForm from \"./components/NewBookForm\";\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      <BookContextProvider>\n        <Navbar />\n\n        <BookList />\n\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n"],"sourceRoot":""}